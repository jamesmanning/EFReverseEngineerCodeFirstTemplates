<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Collections.Generic;
<#
		if (efHost.EntityFrameworkVersion >= new Version(4, 4))
		{
#>
using System.ComponentModel.DataAnnotations.Schema;
<#
		}
		else
		{
#>
using System.ComponentModel.DataAnnotations;
<#
		}
#>

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
<#
		var tableName = (string)efHost.TableSet.MetadataProperties["Table"].Value ?? efHost.TableSet.Name;
		var conventionTableName = System.Data.Entity.Design.PluralizationServices.PluralizationService
				.CreateService(new CultureInfo("en"))
				.Pluralize(efHost.EntityType.Name);

		var schemaName = (string)efHost.TableSet.MetadataProperties["Schema"].Value;
		schemaName = string.IsNullOrWhiteSpace(schemaName)
				? "dbo"
				: schemaName;

		if(schemaName != "dbo" || conventionTableName != tableName)
		{
#>
    [Table("<#= tableName #>", Schema="<#= schemaName #>")]
<#
		}

#>
    public class <#= efHost.EntityType.Name #>
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= code.Escape(efHost.EntityType) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
#>
            this.<#= code.Escape(navProperty) #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
        }
#>
        }

<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
				var columnName = efHost.PropertyToColumnMappings[property].Name;
				if(code.Escape(property) != columnName)
				{
#>
        [Column("<#= columnName #>")]
<#
				}
#>
        <#= Accessibility.ForProperty(property) #> <#= code.Escape(property.TypeUsage) #> <#= code.Escape(property) #> { get; set; }
<#
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
        else
        {
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
    }
#>
    }
}
